0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@1.4.14
3 info using node@v0.10.29
4 verbose node symlink /usr/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /home/pfraces/.npm/3a52ce78-.lock
11 verbose tar pack [ '/home/pfraces/.npm/grunt-daemon/0.1.0/package.tgz', '.' ]
12 verbose tarball /home/pfraces/.npm/grunt-daemon/0.1.0/package.tgz
13 verbose folder .
14 info prepublish grunt-daemon@0.1.0
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /home/pfraces/.npm/1f1177db-tar.lock
17 silly lockFile ac87d725-m-grunt-daemon-0-1-0-package-tgz tar:///home/pfraces/.npm/grunt-daemon/0.1.0/package.tgz
18 verbose lock tar:///home/pfraces/.npm/grunt-daemon/0.1.0/package.tgz /home/pfraces/.npm/ac87d725-m-grunt-daemon-0-1-0-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile ac87d725-m-grunt-daemon-0-1-0-package-tgz tar:///home/pfraces/.npm/grunt-daemon/0.1.0/package.tgz
22 silly lockFile ac87d725-m-grunt-daemon-0-1-0-package-tgz tar:///home/pfraces/.npm/grunt-daemon/0.1.0/package.tgz
23 silly lockFile 8686b55c-s-npm-grunt-daemon-0-1-0-package /home/pfraces/.npm/grunt-daemon/0.1.0/package
24 verbose lock /home/pfraces/.npm/grunt-daemon/0.1.0/package /home/pfraces/.npm/8686b55c-s-npm-grunt-daemon-0-1-0-package.lock
25 silly lockFile 8686b55c-s-npm-grunt-daemon-0-1-0-package /home/pfraces/.npm/grunt-daemon/0.1.0/package
26 silly lockFile 8686b55c-s-npm-grunt-daemon-0-1-0-package /home/pfraces/.npm/grunt-daemon/0.1.0/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'grunt-daemon',
29 silly publish   description: 'Daemonize grunt tasks',
29 silly publish   version: '0.1.0',
29 silly publish   homepage: 'https://github.com/Scytl/grunt-daemon.git',
29 silly publish   author: { name: 'Pau Fracés', email: 'pfraces@gmail.com' },
29 silly publish   license: 'MIT',
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'https://github.com/Scytl/grunt-daemon.git' },
29 silly publish   bugs: { url: 'https://github.com/Scytl/grunt-daemon/issues' },
29 silly publish   dependencies: {},
29 silly publish   peerDependencies: { grunt: '*' },
29 silly publish   keywords:
29 silly publish    [ 'gruntplugin',
29 silly publish      'daemon',
29 silly publish      'wait',
29 silly publish      'forever',
29 silly publish      'keepalive',
29 silly publish      'server' ],
29 silly publish   readme: 'grunt-daemon\n============\n\nDaemonize grunt tasks\n\nGetting started\n---------------\n\nThis plugin requires Grunt\n\nIf you haven\'t used [Grunt][1] before, be sure to check out the\n[Getting Started][2] guide, as it explains how to create a [Gruntfile][3] as\nwell as install and use Grunt plugins. Once you\'re familiar with that process,\nyou may install this plugin with this command:\n\n```sh\nnpm install grunt-daemon --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile\nwith this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks(\'grunt-daemon\');\n```\n\nDaemonize task\n--------------\n\nThis task is so simple that we can explain it by showing its code\n\n```js\nfunction () {\n  this.async();\n}\n```\n\n`this.async()` tells [grunt][1] to run in async mode and returns a handle to a\nfuncion to be called when an async task process has finished\n\n```js\nvar done = this.async();\nsetTimeout(function () {\n  done();\n}, 3000);\n```\n\nIn the previous example, the async process is released after 3 seconds using\nthe call to `done()`\n\nHence, the **daemonize** task sets [grunt][1] in async mode and never releases the\nprocess, making [grunt][1] waiting forever until the user stops the process with\n`Ctrl+C`\n\n### Usage\n\nThis task does not require any configuration. Just create a task grouping\nother tasks and put `daemonize` as the last task to give daemon powers to your\ntask group.\n\nFor example, the [grunt-contrib-connect][4] stops listening requests after\n[grunt][1] tasks have finished, so its suitable for unit testing but cannot be used\nby the developer.\n\nThis behavior can be changed with its `keepalive` option, but that doesn\'t\nallow to get multiple servers listening.\n\nTo enable multiple servers listening forever we can create a task group with\nall connect targets and the **daemonize** task at the end.\n\n```js\n// load required grunt plugins\ngrunt.loadNpmTasks(\'grunt-contrib-connect\');\ngrunt.loadNpmTasks(\'grunt-daemon\');\n\n// configure your connect targets\ngrunt.initConfig({\n\n  // ...\n\n  connect: {\n    foo: {\n      port: 3000\n    },\n    bar: {\n      port: 4000\n    }\n  }\n\n  // ...\n\n});\n\n// register the server task which daemonizes the connect targets\ngrunt.registerTask(\'server\', [\'connect\', \'daemonize\']);\n```\n\nNow, from the command-line you can launch the server task which will keep\nrunning forever ...\n\n    grunt server\n\n>   **Running "connect:foo" (connect) task**\n\n>   foo listening on port 3000\n\n>   **Running "connect:bar" (connect) task**\n\n>   bar listening on port 4000\n\n>   **Running "daemonize" task**\n\n_(waiting forever ...)_\n\nDaemon task\n-----------\n\nThe **daemonize** task is useful for hardcoded task groups, but what if we want\nto daemonize just some [connect][4] targets?\n\nDo we need to create several task groups for several targets combination?\n\nThat is why we have created the **daemon** task\n\nThis task is aimed to be used from the command-line and receive as task\narguments the task and 0 or more targets to be daemonized\n\n### Usage\n\nThis task does not require any configuration. Just load the task in your\n**Gruntfile.js**\n\n```js\ngrunt.loadNpmTasks(\'grunt-daemon\');\n```\n\n_(Note that **grunt-daemon** register both **daemonize** and **daemon** tasks)_\n\nThen, from the command-line you can daemonize any task you want passing the\ntask name as an argument to the **daemon** task\n\n    grunt daemon:connect\n\n>   **Running "connect:foo" (connect) task**\n\n>   foo listening on port 3000\n\n>   **Running "connect:bar" (connect) task**\n\n>   bar listening on port 4000\n\n>   **Running "daemonize" task**\n\n_(waiting forever ...)_\n\nYou can specify the task targets you want to use as further task arguments\n\n    grunt daemon:connect:foo\n\n>   **Running "connect:foo" (connect) task**\n\n>   foo listening on port 3000\n\n>   **Running "daemonize" task**\n\n_(waiting forever ...)_\n\n### How to: create an alias to a daemonized task\n\nSay you want to create a grunt task wich acts like a daemonized task:\n\na `server` alias to `daemon:connect` which allows to daemonize all task targets\n\n    grunt server\n\nor specify the targets to use (`foo` and `qux` in the example)\n\n    grunt server:foo:qux\n\nFor this kind of aliases you need to include a snippet like the following in your\n`Gruntfile.js` replacing the task name (`server` in the example) and the task\nto be used (`connect` in the example) based on your needs\n\n```js\ngrunt.registerTask(\'server\', function () {\n  grunt.task.run([\'daemon\', \'connect\'].concat(this.args).join(\':\'));\n});\n```\n\nIn the previous example `server` will become an alias to `daemon:connect`\n\nLicense\n-------\n\nThe MIT License (MIT)\n\n[1]: http://gruntjs.com/\n[2]: http://gruntjs.com/getting-started\n[3]: http://gruntjs.com/sample-gruntfile\n[4]: https://github.com/gruntjs/grunt-contrib-connect\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: '6ed9fb53c7be4ba057c59dd3b17d2f907e0a8d86',
29 silly publish   _id: 'grunt-daemon@0.1.0',
29 silly publish   scripts: {},
29 silly publish   _shasum: '16c68257e6e021dbc29f5929eed7998e68dd0633',
29 silly publish   _from: '.' }
30 verbose url raw grunt-daemon
31 verbose url resolving [ 'https://registry.npmjs.org/', './grunt-daemon' ]
32 verbose url resolved https://registry.npmjs.org/grunt-daemon
33 info trying registry request attempt 1 at 20:02:06
34 http PUT https://registry.npmjs.org/grunt-daemon
35 http 403 https://registry.npmjs.org/grunt-daemon
36 verbose headers { date: 'Mon, 21 Jul 2014 18:02:07 GMT',
36 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
36 verbose headers   'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=60',
36 verbose headers   'content-length': '8197',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   'x-served-by': 'cache-fra1229-FRA',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1405965726.581100,VS0,VE688',
36 verbose headers   'keep-alive': 'timeout=10, max=50',
36 verbose headers   connection: 'Keep-Alive' }
37 error publish Failed PUT 403
38 error Error: forbidden cannot modify pre-existing version: 0.1.0
38 error old={"name":"grunt-daemon","description":"Daemonize grunt tasks","version":"0.1.0","homepage":"https://github.com/Scytl/grunt-daemon.git","author":{"name":"Pau Fracés","email":"pfraces@gmail.com"},"license":"MIT","repository":{"type":"git","url":"https://github.com/Scytl/grunt-daemon.git"},"bugs":{"url":"https://github.com/Scytl/grunt-daemon/issues"},"dependencies":{},"peerDependencies":{"grunt":"latest"},"keywords":["gruntplugin","daemon","wait","forever","keepalive","server"],"gitHead":"6cea2f85fb42e02fbde07d278a6087335ceb14b3","_id":"grunt-daemon@0.1.0","scripts":{},"_shasum":"7ebc57edbc815a7f8ba042d2e5ca717d71af9c84","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"pfraces","email":"pfraces@gmail.com"},"maintainers":[{"name":"pfraces","email":"pfraces@gmail.com"}],"dist":{"shasum":"7ebc57edbc815a7f8ba042d2e5ca717d71af9c84","tarball":"http://registry.npmjs.org/grunt-daemon/-/grunt-daemon-0.1.0.tgz"}}
38 error new={"name":"grunt-daemon","description":"Daemonize grunt tasks","version":"0.1.0","homepage":"https://github.com/Scytl/grunt-daemon.git","author":{"name":"Pau Fracés","email":"pfraces@gmail.com"},"license":"MIT","repository":{"type":"git","url":"https://github.com/Scytl/grunt-daemon.git"},"bugs":{"url":"https://github.com/Scytl/grunt-daemon/issues"},"dependencies":{},"peerDependencies":{"grunt":"*"},"keywords":["gruntplugin","daemon","wait","forever","keepalive","server"],"readme":"grunt-daemon\u000a============\u000a\u000aDaemonize grunt tasks\u000a\u000aGetting started\u000a---------------\u000a\u000aThis plugin requires Grunt\u000a\u000aIf you haven't used [Grunt][1] before, be sure to check out the\u000a[Getting Started][2] guide, as it explains how to create a [Gruntfile][3] as\u000awell as install and use Grunt plugins. Once you're familiar with that process,\u000ayou may install this plugin with this command:\u000a\u000a```sh\u000anpm install grunt-daemon --save-dev\u000a```\u000a\u000aOnce the plugin has been installed, it may be enabled inside your Gruntfile\u000awith this line of JavaScript:\u000a\u000a```js\u000agrunt.loadNpmTasks('grunt-daemon');\u000a```\u000a\u000aDaemonize task\u000a--------------\u000a\u000aThis task is so simple that we can explain it by showing its code\u000a\u000a```js\u000afunction () {\u000a  this.async();\u000a}\u000a```\u000a\u000a`this.async()` tells [grunt][1] to run in async mode and returns a handle to a\u000afuncion to be called when an async task process has finished\u000a\u000a```js\u000avar done = this.async();\u000asetTimeout(function () {\u000a  done();\u000a}, 3000);\u000a```\u000a\u000aIn the previous example, the async process is released after 3 seconds using\u000athe call to `done()`\u000a\u000aHence, the **daemonize** task sets [grunt][1] in async mode and never releases the\u000aprocess, making [grunt][1] waiting forever until the user stops the process with\u000a`Ctrl+C`\u000a\u000a### Usage\u000a\u000aThis task does not require any configuration. Just create a task grouping\u000aother tasks and put `daemonize` as the last task to give daemon powers to your\u000atask group.\u000a\u000aFor example, the [grunt-contrib-connect][4] stops listening requests after\u000a[grunt][1] tasks have finished, so its suitable for unit testing but cannot be used\u000aby the developer.\u000a\u000aThis behavior can be changed with its `keepalive` option, but that doesn't\u000aallow to get multiple servers listening.\u000a\u000aTo enable multiple servers listening forever we can create a task group with\u000aall connect targets and the **daemonize** task at the end.\u000a\u000a```js\u000a// load required grunt plugins\u000agrunt.loadNpmTasks('grunt-contrib-connect');\u000agrunt.loadNpmTasks('grunt-daemon');\u000a\u000a// configure your connect targets\u000agrunt.initConfig({\u000a\u000a  // ...\u000a\u000a  connect: {\u000a    foo: {\u000a      port: 3000\u000a    },\u000a    bar: {\u000a      port: 4000\u000a    }\u000a  }\u000a\u000a  // ...\u000a\u000a});\u000a\u000a// register the server task which daemonizes the connect targets\u000agrunt.registerTask('server', ['connect', 'daemonize']);\u000a```\u000a\u000aNow, from the command-line you can launch the server task which will keep\u000arunning forever ...\u000a\u000a    grunt server\u000a\u000a>   **Running \"connect:foo\" (connect) task**\u000a\u000a>   foo listening on port 3000\u000a\u000a>   **Running \"connect:bar\" (connect) task**\u000a\u000a>   bar listening on port 4000\u000a\u000a>   **Running \"daemonize\" task**\u000a\u000a_(waiting forever ...)_\u000a\u000aDaemon task\u000a-----------\u000a\u000aThe **daemonize** task is useful for hardcoded task groups, but what if we want\u000ato daemonize just some [connect][4] targets?\u000a\u000aDo we need to create several task groups for several targets combination?\u000a\u000aThat is why we have created the **daemon** task\u000a\u000aThis task is aimed to be used from the command-line and receive as task\u000aarguments the task and 0 or more targets to be daemonized\u000a\u000a### Usage\u000a\u000aThis task does not require any configuration. Just load the task in your\u000a**Gruntfile.js**\u000a\u000a```js\u000agrunt.loadNpmTasks('grunt-daemon');\u000a```\u000a\u000a_(Note that **grunt-daemon** register both **daemonize** and **daemon** tasks)_\u000a\u000aThen, from the command-line you can daemonize any task you want passing the\u000atask name as an argument to the **daemon** task\u000a\u000a    grunt daemon:connect\u000a\u000a>   **Running \"connect:foo\" (connect) task**\u000a\u000a>   foo listening on port 3000\u000a\u000a>   **Running \"connect:bar\" (connect) task**\u000a\u000a>   bar listening on port 4000\u000a\u000a>   **Running \"daemonize\" task**\u000a\u000a_(waiting forever ...)_\u000a\u000aYou can specify the task targets you want to use as further task arguments\u000a\u000a    grunt daemon:connect:foo\u000a\u000a>   **Running \"connect:foo\" (connect) task**\u000a\u000a>   foo listening on port 3000\u000a\u000a>   **Running \"daemonize\" task**\u000a\u000a_(waiting forever ...)_\u000a\u000a### How to: create an alias to a daemonized task\u000a\u000aSay you want to create a grunt task wich acts like a daemonized task:\u000a\u000aa `server` alias to `daemon:connect` which allows to daemonize all task targets\u000a\u000a    grunt server\u000a\u000aor specify the targets to use (`foo` and `qux` in the example)\u000a\u000a    grunt server:foo:qux\u000a\u000aFor this kind of aliases you need to include a snippet like the following in your\u000a`Gruntfile.js` replacing the task name (`server` in the example) and the task\u000ato be used (`connect` in the example) based on your needs\u000a\u000a```js\u000agrunt.registerTask('server', function () {\u000a  grunt.task.run(['daemon', 'connect'].concat(this.args).join(':'));\u000a});\u000a```\u000a\u000aIn the previous example `server` will become an alias to `daemon:connect`\u000a\u000aLicense\u000a-------\u000a\u000aThe MIT License (MIT)\u000a\u000a[1]: http://gruntjs.com/\u000a[2]: http://gruntjs.com/getting-started\u000a[3]: http://gruntjs.com/sample-gruntfile\u000a[4]: https://github.com/gruntjs/grunt-contrib-connect\u000a","readmeFilename":"README.md","gitHead":"6ed9fb53c7be4ba057c59dd3b17d2f907e0a8d86","_id":"grunt-daemon@0.1.0","scripts":{},"_shasum":"16c68257e6e021dbc29f5929eed7998e68dd0633","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"pfraces","email":"pfraces@gmail.com"},"maintainers":[{"name":"pfraces","email":"pfraces@gmail.com"}],"dist":{"shasum":"16c68257e6e021dbc29f5929eed7998e68dd0633","tarball":"http://registry.npmjs.org/grunt-daemon/-/grunt-daemon-0.1.0.tgz"}}: grunt-daemon
38 error     at RegClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:274:14)
38 error     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:212:65)
38 error     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:123:22)
38 error     at Request.emit (events.js:98:17)
38 error     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:893:14)
38 error     at Request.emit (events.js:117:20)
38 error     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:844:12)
38 error     at IncomingMessage.emit (events.js:117:20)
38 error     at _stream_readable.js:929:16
38 error     at process._tickCallback (node.js:419:13)
39 error If you need help, you may report this *entire* log,
39 error including the npm and node versions, at:
39 error     <http://github.com/npm/npm/issues>
40 error System Linux 3.2.0-65-generic
41 error command "/usr/bin/node" "/usr/bin/npm" "publish"
42 error cwd /home/pfraces/work/git/grunt-daemon
43 error node -v v0.10.29
44 error npm -v 1.4.14
45 verbose exit [ 1, true ]
